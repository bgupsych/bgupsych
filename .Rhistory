test <- round(c.tag[1]+a[1]*b[1],5)==round(c[1],5)
sig <- unique(c(c[2]<al,a[2]<al,
b[2]<al,c.tag[2]<al))
paths <- data.frame(
a=round(a,4),b=round(b,4),
"c.tag"=round(c.tag,4),c=round(c,4))
rownames(paths) <- c("Mekadem","P VALUE")
ifelse(test,print("a*b+c'=c is correct"),
"a*b+c'=c went wrong")
print(ifelse(sig,"all paths are significant",
"NOTE: not all paths are significant"))
print(ifelse(as.numeric(round(c.tag[1],3))==0 |
as.numeric(c.tag[2])>al,
"c tag is close to zero, or isn't significant",
"There's a direct and significant effect"))
return(c(paths,invisible(al)))
}
aaa <- mediation(DV,x.pred,x.med)
aaa
## Mediation model
mediation <- function(DV,x.pred,x.med,alpha=5){
al <- alpha/100
x.model <- summary(lm(DV~x.pred))
c <- coef(x.model)[2,c(1,4)]
m.model <- summary(lm(x.med~x.pred))
a <- coef(m.model)[2,c(1,4)]
full.model <- summary(lm(DV~x.med+x.pred))
b <- coef(full.model)[2,c(1,4)]
c.tag <- coef(full.model)[3,c(1,4)]
test <- round(c.tag[1]+a[1]*b[1],5)==round(c[1],5)
sig <- unique(c(c[2]<al,a[2]<al,
b[2]<al,c.tag[2]<al))
paths <- data.frame(
a=round(a,4),b=round(b,4),
"c.tag"=round(c.tag,4),c=round(c,4))
rownames(paths) <- c("Mekadem","P VALUE")
ifelse(test,print("a*b+c'=c is correct"),
"a*b+c'=c went wrong")
print(ifelse(sig,"all paths are significant",
"NOTE: not all paths are significant"))
print(ifelse(as.numeric(round(c.tag[1],3))==0 |
as.numeric(c.tag[2])>al,
"c tag is close to zero, or isn't significant",
"There's a direct and significant effect"))
return(paths)
}
mediation(DV,x.pred,x.med,alpha = 50)
mediation(DV,x.pred,x.med,alpha = .0001)
mediation <- function(DV,x.pred,x.med,alpha=5){
al <- alpha/100
x.model <- summary(lm(DV~x.pred))
c <- coef(x.model)[2,c(1,4)]
m.model <- summary(lm(x.med~x.pred))
a <- coef(m.model)[2,c(1,4)]
full.model <- summary(lm(DV~x.med+x.pred))
b <- coef(full.model)[2,c(1,4)]
c.tag <- coef(full.model)[3,c(1,4)]
test <- round(c.tag[1]+a[1]*b[1],5)==round(c[1],5)
sig <- unique(c(c[2]<al,a[2]<al,
b[2]<al,c.tag[2]<al))
paths <- data.frame(
a=round(a,4),b=round(b,4),
"c.tag"=round(c.tag,4),c=round(c,4))
rownames(paths) <- c("Mekadem","P VALUE")
ifelse(test,print("a*b+c'=c is correct"),
"a*b+c'=c went wrong")
print(ifelse(sig,"all paths are significant",
"NOTE: ignore previous. NOT all paths are significant"))
print(ifelse(as.numeric(round(c.tag[1],3))==0 |
as.numeric(c.tag[2])>al,
"c tag is close to zero, or isn't significant",
"There's a direct and significant effect"))
return(paths)
}
mediation(DV,x.pred,x.med,alpha = .0001)
mediation <- function(DV,x.pred,x.med,alpha=5){
al <- alpha/100
x.model <- summary(lm(DV~x.pred))
c <- coef(x.model)[2,c(1,4)]
m.model <- summary(lm(x.med~x.pred))
a <- coef(m.model)[2,c(1,4)]
full.model <- summary(lm(DV~x.med+x.pred))
b <- coef(full.model)[2,c(1,4)]
c.tag <- coef(full.model)[3,c(1,4)]
test <- round(c.tag[1]+a[1]*b[1],5)==round(c[1],5)
sig <- unique(c(c[2]<al,a[2]<al,
b[2]<al,c.tag[2]<al))
paths <- data.frame(
a=round(a,4),b=round(b,4),
"c.tag"=round(c.tag,4),c=round(c,4))
rownames(paths) <- c("Mekadem","P VALUE")
ifelse(test,print("a*b+c'=c is correct"),
"a*b+c'=c went wrong")
print(ifelse(sig,"all paths are significant",
"Ignore previous. NOT all paths are significant"))
print(ifelse(as.numeric(round(c.tag[1],3))==0 |
as.numeric(c.tag[2])>al,
"c tag is close to zero, or isn't significant",
"There's a direct and significant effect"))
return(paths)
}
mediation(DV,x.pred,x.med,alpha = .0001)
mediation <- function(DV,x.pred,x.med,alpha=5){
al <- alpha/100
x.model <- summary(lm(DV~x.pred))
c <- coef(x.model)[2,c(1,4)]
m.model <- summary(lm(x.med~x.pred))
a <- coef(m.model)[2,c(1,4)]
full.model <- summary(lm(DV~x.med+x.pred))
b <- coef(full.model)[2,c(1,4)]
c.tag <- coef(full.model)[3,c(1,4)]
test <- round(c.tag[1]+a[1]*b[1],5)==round(c[1],5)
sig <- unique(c(c[2]<al,a[2]<al,
b[2]<al,c.tag[2]<al))
paths <- data.frame(
a=round(a,4),b=round(b,4),
"c.tag"=round(c.tag,4),c=round(c,4))
rownames(paths) <- c("Mekadem","P VALUE")
ifelse(test,print("a*b+c'=c is correct"),
"a*b+c'=c went wrong")
print(ifelse(sig,"all paths are significant",
"NOT all paths are significant. see table"))
print(ifelse(as.numeric(round(c.tag[1],3))==0 |
as.numeric(c.tag[2])>al,
"c tag is close to zero, or isn't significant",
"There's a direct and significant effect"))
return(paths)
}
x.med <- data$Economy..GDP.per.Capita.
mediation <- function(DV,x.pred,x.med,alpha=5){
al <- alpha/100
x.model <- summary(lm(DV~x.pred))
c <- coef(x.model)[2,c(1,4)]
m.model <- summary(lm(x.med~x.pred))
a <- coef(m.model)[2,c(1,4)]
full.model <- summary(lm(DV~x.med+x.pred))
b <- coef(full.model)[2,c(1,4)]
c.tag <- coef(full.model)[3,c(1,4)]
test <- round(c.tag[1]+a[1]*b[1],5)==round(c[1],5)
sig <- unique(c(c[2]<al,a[2]<al,
b[2]<al,c.tag[2]<al))
paths <- data.frame(
a=round(a,4),b=round(b,4),
"c.tag"=round(c.tag,4),c=round(c,4))
rownames(paths) <- c("Mekadem","P VALUE")
ifelse(test,print("a*b+c'=c is correct"),
"a*b+c'=c went wrong")
print(ifelse(sig,"all paths are significant",
"Ignore previous. NOT all paths are significant"))
print(ifelse(as.numeric(round(c.tag[1],3))==0 |
as.numeric(c.tag[2])>al,
"c tag is close to zero, or isn't significant",
"There's a direct and significant effect"))
return(paths)
}
mediation <- function(DV,x.pred,x.med,alpha=5){
al <- alpha/100
x.model <- summary(lm(DV~x.pred))
c <- coef(x.model)[2,c(1,4)]
m.model <- summary(lm(x.med~x.pred))
a <- coef(m.model)[2,c(1,4)]
full.model <- summary(lm(DV~x.med+x.pred))
b <- coef(full.model)[2,c(1,4)]
c.tag <- coef(full.model)[3,c(1,4)]
test <- round(c.tag[1]+a[1]*b[1],5)==round(c[1],5)
sig <- unique(c(c[2]<al,a[2]<al,
b[2]<al,c.tag[2]<al))
paths <- data.frame(
a=round(a,4),b=round(b,4),
"c.tag"=round(c.tag,4),c=round(c,4))
rownames(paths) <- c("Mekadem","P VALUE")
ifelse(test,print("a*b+c'=c is correct"),
"a*b+c'=c went wrong")
print(ifelse(sig,"all paths are significant",
"NOT all paths are significant, see table"))
print(ifelse(as.numeric(round(c.tag[1],3))==0 |
as.numeric(c.tag[2])>al,
"c tag is close to zero, or isn't significant",
"There's a direct and significant effect"))
return(paths)
}
mediation(DV,x.pred,x.med,alpha = .0001)
x <- sample(10,11,T)
x
Mo = as.numeric(names(table(x))[table(x)==max(table(x))])
Mo
x <- c(x,2)
Mo = as.numeric(names(table(x))[table(x)==max(table(x))])
Mo
mode <- function(x) (as.numeric(names(table(x))[table(x)==max(table(x))]))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
x <- c()
for(i in 1:1e5){
z <- sample(10,10,T)
x[i] <- mode(z)
}
hist(x)
prop.table(table(x))
hist(prop.table(table(x)))
prop.table(table(x))
sort(prop.table(table(x)))
sort(prop.table(table(x)),decreasing = T)
accumulate(x)
accumulate(x,.init = 1)
accumulate(1:5,x,.init = 1)
accumulate(x,sum)
accumulate(x,sum)
accumulate(prop.table(table(x)),sum)
hist(accumulate(prop.table(table(x)),sum))
hist(accumulate(prop.table(table(x)),sum),breaks = 1)
hist(accumulate(prop.table(table(x)),sum),breaks = 0.01)
hist(accumulate(prop.table(table(x)),sum),breaks =prop.table(table(x)) )
hist(accumulate(prop.table(table(x)),sum),breaks =c(0.1,0.2) )
hist(accumulate(prop.table(table(x)),sum),breaks = 0.6)
hist(accumulate(prop.table(table(x)),sum),breaks = 10)
hist(accumulate(prop.table(table(x)),sum),breaks = 20)
hist(accumulate(prop.table(table(x)),sum),breaks = 100)
hist(accumulate(prop.table(table(x)),sum),breaks = 10)
hist(accumulate(prop.table(table(x)),sum))
# Mode function
mode <- function(x) (as.numeric(names(table(x))[table(x)==max(table(x))]))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
mode(sample(10,11,T))
# Setting the board
set.seed(1927)
game <- data.frame(
index=1:16,
color=sample(c("red","green","blue"),16,T),
shape=sample(c("triangle","squre","circle"),16,T),
number=sample(1:3,16,T)
)
view(game)
# @ Let's play @
# color:
game[c(5,11),] # no match
# shape:
game[c(2,16),] #no match
# number remembered the results and takes 2 and 16
game[c(2,16),] # match. remove cards 2 and 16
game[c(2,16),] <- NA
number <- 1
# its 'number' one more time, he cant remember that color also flipped a pair for him.
game[c(1,7),] # no match
# color:
game[c(14,8),] # no match
# shape:
game[c(1,7),] # match
game[c(1,7),] <- NA
shape <- 1
game[c(3,9),] # no match
# number:
game[c(3,9),] # match
game[c(3,9),] <- NA
number <- number+1
game[c(4,15),] # match. next participant. also took a pair from 'shape'
game[c(4,15),] <- NA
number <- number+1
# I forgot which cards are still on:
game$index[is.numeric(game$index)]
# by using the index, we know which cards remain.
# color:
game[c(5,14),] # match
game[c(5,14),] <- NA
color <- 1
game[c(10,13),] # no match
# shape:
game[c(6,8),] # match
game[c(6,8),] <- NA
shape <- shape+1
game$index[is.numeric(game$index)]
game[c(10,13),] # no match
# number:
game[c(10,11),] # no match
# color:
game[c(10,13),] # no match
# shape:
game[c(12,13),] # no match
# number:
game[c(12,13),] # match
game[c(12,13),] <- NA
number <- number+1
game$index[is.numeric(game$index)]
game[c(10,11),] # no match, and no one can match neither.
View(game)
game <- data.frame(
index=1:16,
color=sample(c("red","green","blue"),16,T),
shape=sample(c("triangle","squre","circle"),16,T),
number=sample(1:3,16,T)
)
View(game)
# Setting the board
set.seed(1927)
game <- data.frame(
index=1:16,
color=sample(c("red","green","blue"),16,T),
shape=sample(c("triangle","squre","circle"),16,T),
number=sample(1:3,16,T)
)
View(game)
## loser guesess the winner's dimension
library(tidyverse)
game %>% arrange(shape,color)
game %>% arrange(shape,color) %>% view()
library(BGUPsych)
alpha=5
round(qnorm((100-(alpha/2))/100),3)
library(BGUPsych)
#' Mode finder
#' @export
#' @description What value is the most frequent one?
#' @details In case of two Mo values, both will return.
#' @param x a vector containing numberss.
#' @examples x <- c(11,14,13,15,13,16,14,13)
mode <- function(x) (as.numeric(names(table(x))[table(x)==max(table(x))]))
mode(c(11,14,13,15,13,16,14,13))
x <- c(x,14)
mode(x)
mode(c(11,14,13,15,13,16,14,13,14))
library(BGUPsych)
mode(c(1,2,3,2))
mode(c(1,2,3,2))
mode(c(1,2,3,4))
#' Mode finder
#' @export
#' @description What value is the most frequent one?
#' @details In case of two Mo values, both will return.
#' @param x a vector containing numbers.
#' @examples x <- c(11,14,13,15,13,16,14,13)
#' mode(x) ## 13
#' y <- c(x,14)
#' mode(y) ## 13, 14
mode <- function(x) (as.numeric(names(table(x))[table(x)==max(table(x))]))
mode(c(1,2,2))
mode(c(1,2,2,3))
#' Mode finder
#' @export
#' @description What value is the most frequent one?
#' @details In case of two Mo values, both will return.
#' @param x a vector containing numbers.
#' @examples x <- c(11,14,13,15,13,16,14,13)
#' mode(x) ## 13
#' y <- c(x,14)
#' mode(y) ## 13, 14
mode <- function(x) {
x <- as.numeric(names(table(x))[table(x)==max(table(x))])
return(x)}
mode(c(1,2,425,33,223,2))
mode(c(1,2,425,33,223))
library(BGUPsych)
mode(c(1,2,3,4))
mode(c(1,2,3,4,4))
mode(c(1,2,3,4,4,2))
library(BGUPsych)
# example Pascal(30)
?importfrom
# example Pascal(30)
?importFrom
usethis::use_gpl3_license()
usethis::use_package("purrr")
library(BGUPsych)
library(BGUPsych)
Pascal(30)
Pascal <- function(nrow){
purrr::accumulate(1:nrow,~c(0,.)+c(.,0),.init = 1)
}
Pascal(30)
Pascal(4)
Pascal(4)
choose(4,2)
import(ggplo2)
usethis::use_package(ggplot2)
usethis::use_package("ggplot2")
library(BGUPsych)
library(BGUPsych)
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
library(BGUPsych)
libpatha()
libpaths()
.libPaths()
.libPaths("C:/Program Files/R/R-4.0.3/library")
.libPaths()
. ~/.profile
.~/.profile
local()
localeToCharset()
library(BGUPsych)
Sys.getlocale()
Sys.setlocale(category = "LC_ALL",locale = "")
R.home()
Sys.getenv("HOME")
file.edit("~/.Rprofile")
file.edit(path.expand(file.path("~", ".Renviron")))
Sys.info()
updateR()
install.packages("installer")
library(installer)
library(installer)
update.packages()
update.packages()
update.packages()
--no-environ
.Rprofile()
install.packages("dplyr")
install.packages(c("colorspace", "glue", "rlang", "tibble", "utf8"))
install.packages(c("fansi", "igraph", "xfun"))
install.packages("igraph")
library(ggplot2)
library(BGUPsych)
R_TESTS" = ""
R_TESTS = ""
mitun(trees$Girth,trees$Height,trees$Volume)
detach("package:ggplot2", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
mitun(trees$Girth,trees$Height,trees$Volume)
library(BGUPsych)
Pascal(20)
c <- Pascal(4)
c[5,3]==choose(4,2)
c[5]
c[5[3]]
c[[5]]
c[[5]3]
c[5][3]
c[5[3]]
c
c[5]
c5 <- c[5]
c5[3]
c5
c5 <- unlist(c[5])
c5
c
unlist(c)
usethis::use_gpl_license()
library(BGUPsych)
devtools::load_all()
library(BGUPsych)
remove.packages("BGUPsych", lib="~/R/win-library/4.0")
library(devtools)
install_github("bgupsych/bgupsych")
install_github("bgupsych/bgupsych")
install_github("bgupsych/bgupsych")
library(BGUPsych)
MASTER()
MASTER()
mitun(trees$Girth,trees$Height,trees$Volume)
??BGUPsych
??BGUPsych
?BGUPsych
??BGUPsych
qnorm(0.4,180,24)
qnorm(0.6,180,24)
qnorm(0.4,180,24)
data <- data.frame(x=rnorm(1000,180,24))
data$x[400]
data$x[600]
hist(x)
hist(data$x)
library(BGUPsych)
library(BGUPsych)
library(BGUPsych)
?MASTER
